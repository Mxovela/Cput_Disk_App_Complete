unit Main;
interface
uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics,
  Controls, Forms, uniGUITypes, uniGUIAbstractClasses,
  uniGUIClasses, uniGUIRegClasses, uniGUIForm, uniGUIBaseClasses, uniPanel,
  Vcl.Imaging.pngimage, uniImage, uniLabel, uniButton, uniEdit, uniDBNavigator,
  uniBasicGrid, uniDBGrid, uniTreeView, uniRadioButton, Data.DB, DBAccess, MemDS,
  uniMultiItem, uniComboBox, uniDBComboBox, uniDBLookupComboBox, uniDBEdit,
  uniDateTimePicker, uniRadioGroup, uniDBRadioGroup, uniDBDateTimePicker;                                                                                                                                                                                                                                                                                                           //Mxolisi Ndovela
type
  TMainForm = class(TUniForm)
    backgroundPanel: TUniPanel;
    topPanel: TUniPanel;
    leftPanel: TUniPanel;
    staffedit: TUniEdit;
    passedit: TUniEdit;
    loginbtn: TUniButton;
    stafflbl: TUniLabel;
    passlbl: TUniLabel;
    UniImage1: TUniImage;
    UniTreeView1: TUniTreeView;
    searchedit: TUniEdit;
    searchbtn: TUniButton;
    userrad: TUniRadioButton;
    diskregrad: TUniRadioButton;
    logoutbtn: TUniButton;
    diskGrid: TUniDBGrid;
    userGrid: TUniDBGrid;
    userNaviBar: TUniDBNavigator;
    diskNaviBar: TUniDBNavigator;
    rightPanel: TUniPanel;
    UniLabel2: TUniLabel;
    UniLabel3: TUniLabel;
    UniLabel4: TUniLabel;
    UniLabel6: TUniLabel;
    UniLabel7: TUniLabel;
    savebtn: TUniButton;
    submitbtn: TUniButton;
    UniLabel8: TUniLabel;
    clearbtn: TUniButton;
    Useridlbl: TUniLabel;
    firstname: TUniLabel;
    vechcolourlbl: TUniLabel;
    UniLabel10: TUniLabel;
    vehmakelbl: TUniLabel;
    Surname: TUniLabel;
    UniEditUser_id: TUniEdit;
    UniEditVehcolour: TUniEdit;
    UniEditRecno: TUniEdit;
    UniEditRegno: TUniEdit;
    UniEditFirstname: TUniEdit;
    UniEditVehmake: TUniEdit;
    UniEditSurname: TUniEdit;
    UniEditVehmodel: TUniEdit;
    UniEditBayno: TUniEdit;
    UniEditContactno: TUniEdit;
    UniEditAddress: TUniEdit;
    datepicker: TUniDateTimePicker;
    procedure loginbtnClick(Sender: TObject);
    procedure submitbtnClick(Sender: TObject);
   // procedure diskGridCellClick(Column: TUniDBGridColumn);
    procedure UniTreeView1Change(Sender: TObject; Node: TUniTreeNode);
    procedure savebtnClick(Sender: TObject);
  //  procedure clearbtnClick(Sender: TObject);
    procedure searchbtnClick(Sender: TObject);
   // procedure userradClick(Sender: TObject);
   // procedure facultyradClick(Sender: TObject);
   // procedure departmentradClick(Sender: TObject);
//    procedure vehiclemakeradClick(Sender: TObject);
      procedure logoutbtnClick(Sender: TObject);
//      procedure UniFormShow(Sender: TObject);
    procedure userGridCellClick(Column: TUniDBGridColumn);
 //   procedure DiskGridCellClick(Column: TUniDBGridColumn);
 //   procedure UniFormShow(Sender: TObject);
//    procedure searchbtnClick(Sender: TObject);

  //  procedure searcheditChange(Sender: TObject);
  private
    { Private declarations }

    var FSelectedTable: string; // Track selected table based on radio button
 //     procedure PerformSearch;
//    function GetSelectedColourID(const ColourName: string): string;
//    procedure EnsureForeignKeyExists(const TableName, ColumnName, Value: string);
//    procedure LoadComboBoxes;


  public
    { Public declarations }
  end;
function MainForm: TMainForm;

implementation
{$R *.dfm}
uses
  uniGUIVars, uniGUIApplication, MainModule;

function MainForm: TMainForm;
begin
 // Result := TMainForm(UniMainModule.GetFormInstance(TMainForm));
end;

//procedure LoadComboboxes;
//var
//  MainModuleInstance: Tuni;
//  cmbVehMakes: TUniComboBox;
//  cmbVehModel: TUniComboBox;
//  cmbVehColour: TUniComboBox;
//begin
//  MainModuleInstance := Uni;
//
//  // Load Vehicle Makes
//  MainModuleInstance.qvehmakes.SQL.Text := 'SELECT vehmake_name FROM vehmakes';
//  MainModuleInstance.qvehmakes.Open;
//  cmbVehMakes.Items.Clear;
//  while not MainModuleInstance.qvehmakes.Eof do
//  begin
//    cmbVehMakes.Items.Add(MainModuleInstance.qvehmakes.FieldByName('vehmake_name').AsString);
//    MainModuleInstance.qvehmakes.Next;
//  end;
//  MainModuleInstance.qvehmakes.Close;
//
//  // Load Vehicle Models
//  MainModuleInstance.tbVehModels.SQL.Text := 'SELECT vehmodel_name FROM vehmodel';
//  MainModuleInstance.tbVehModels.Open;
//  cmbVehModel.Items.Clear;
//  while not MainModuleInstance.tbVehModels.Eof do
//  begin
//    cmbVehModel.Items.Add(MainModuleInstance.tbVehModels.FieldByName('vehmodel_name').AsString);
//    MainModuleInstance.tbVehModels.Next;
//  end;
//  MainModuleInstance.tbVehModels.Close;
//
//  // Load Vehicle Colours
//  MainModuleInstance.qvehcolour.SQL.Text := 'SELECT colour_name FROM vehcolours';
//  MainModuleInstance.qvehcolour.Open;
//  cmbVehColour.Items.Clear;
//  while not MainModuleInstance.qvehcolour.Eof do
//  begin
//    cmbVehColour.Items.Add(MainModuleInstance.qvehcolour.FieldByName('colour_name').AsString);
//    MainModuleInstance.qvehcolour.Next;
//  end;
//  MainModuleInstance.qvehcolour.Close;
//end;

//procedure TMainForm.UniFormShow(Sender: TObject);
//begin
//  LoadComboboxes;
//end;

//LOGIN BUTTON
procedure TMainForm.loginbtnClick(Sender: TObject);
var
  Username, Password: string;
  MainModuleInstance: Tuni;
begin
  Username := staffedit.Text;
  Password := passedit.Text;

  // Check if the staff number or password fields are empty
  if (Username = '') or (Password = '') then
  begin
    ShowMessage('Please enter staff number and password as required');
    Exit;
  end;

  // Access the MainModule instance using the uni function
  MainModuleInstance := uni;

  try
    // Prepare SQL query to check credentials
    MainModuleInstance.qstafflog.SQL.Text :=
      'SELECT COUNT(*) FROM stafflog WHERE staffnumber = :staffnumber AND password = :password';
    MainModuleInstance.qstafflog.ParamByName('staffnumber').AsString := Username;
    MainModuleInstance.qstafflog.ParamByName('password').AsString := Password;
    MainModuleInstance.qstafflog.Open;

    // Check if login is successful
    if MainModuleInstance.qstafflog.Fields[0].AsInteger > 0 then
    begin
      ShowMessage('Login Successful, Welcome');
      // Hide login controls and show main UI elements
      loginbtn.Visible := False;
      staffedit.Visible := False;
      passedit.Visible := False;
      stafflbl.Visible := False;
      passlbl.Visible := False;
      diskGrid.Visible := True;
      UniTreeView1.Visible := True;
      logoutbtn.Visible := True;
    end
    else
    begin
      ShowMessage('Invalid username or password');
    end;
  finally
    // Close the query after use
    MainModuleInstance.qstafflog.Close;
  end;
end;

  //LOGOUT BUTTON
procedure TMainForm.logoutbtnClick(Sender: TObject);
begin
   ShowMessage('User logout!');
        loginbtn.Visible := True;
        staffedit.Visible := True;
        passedit.Visible := True;
        stafflbl.Visible := True;
        passlbl.Visible := True;
        //frontpanel.Visible := True;
        diskGrid.Visible := False;
        UniTreeView1.Visible := False;
        logoutbtn.Visible := False;
end;
//SAVE BUTTON
  procedure TMainForm.savebtnClick(Sender: TObject);
  var
    userid, firstname, surname, campus, vehmake, vehmodel, vehcolour, RegNo, ReceiptNo, Bay, Contact, Address, RegDate: string;
    MainModuleInstance: Tuni;
  begin
    // Retrieve data from the form fields
//    userid := usertypnoedit.Text;
//    firstname := firstnameedit.Text;
//    surname := surnameedit.Text;
//    department := departmentbox.Text;
//    faculty := facultybox.Text;
//    campus := campusbox.Text;
//    vehmake := vehmakebox.Text;
//    vehmodel := vehmodelbox.Text;
//    vehcolour := vehcolourbox.Text;
//    RegNo := regnoedit.Text;
//    ReceiptNo := receiptedit.Text;
//    Bay := bayedit.Text;
//    Contact := contactedit.Text;
//    Address := addressedit.Text;
//    RegDate := regdateedit.Text;

     //Check if any required field is empty (this validation is optional based on your requirements)
     if (userid = '') or (RegNo = '') or (ReceiptNo = '') or (Bay = '') or
         (Contact = '') or (Address = '') or (RegDate = '') then
     begin
       ShowMessage('Please fill in all fields');
       Exit;
     end;

     MainModuleInstance := uni;
    try
      // Prepare SQL query to update data in disk_reg table
      MainModuleInstance.qDiskapplication.SQL.Text := 'UPDATE diskapplication SET ' +
                           'regno = :regno, ' +
                           'receiptno = :receiptno, ' +
                           'bayno = :bayno, ' +
                           'regyear = :regyear, ' +
                           'contactno = :contactno, ' +
                           'address = :address, ' +
                           'regdate = :regdate ' +
                           'WHERE diskseq = :diskseq';
      MainModuleInstance.qDiskapplication.ParamByName('regno').AsString := RegNo;
      MainModuleInstance.qDiskapplication.ParamByName('receiptno').AsString := ReceiptNo;
      MainModuleInstance.qDiskapplication.ParamByName('bayno').AsString := Bay;
      MainModuleInstance.qDiskapplication.ParamByName('contactno').AsString := Contact;
      MainModuleInstance.qDiskapplication.ParamByName('address').AsString := Address;
      MainModuleInstance.qDiskapplication.ParamByName('regdate').AsString := RegDate;
      MainModuleInstance.qDiskapplication.ParamByName('diskseq').AsString := userid;
      MainModuleInstance.qDiskapplication.ExecSQL;
      // Show message for successful update
      ShowMessage('Data updated successfully');
      // Refresh the dataset to reflect changes in the grid
      MainModuleInstance.qDiskapplication.Close;
      MainModuleInstance.qDiskapplication.SQL.Text := 'SELECT * FROM diskapplication';
      MainModuleInstance.qDiskapplication.Open;
      // Refresh the grid to display updated data
      diskGrid.Refresh;
    except
      on E: Exception do
        ShowMessage('Error: ' + E.Message);
//
    end
end;


 procedure TMainForm.searchbtnClick(Sender: TObject);

var
  SearchValue: string;
  MainModuleInstance: Tuni;
begin
  // Retrieve the search value from the search edit
  SearchValue := Trim(searchedit.Text);

  if SearchValue = '' then
  begin
    ShowMessage('Please enter a search value');
    Exit;
  end;

  // Access the MainModule instance using the uni function
  MainModuleInstance := uni;

  try
    // Prepare SQL query to fetch data based on the search criteria
    MainModuleInstance.Qusertable.SQL.Text :=
      'SELECT * FROM usertable WHERE user_no LIKE :search_value';
    MainModuleInstance.Qusertable.ParamByName('search_value').AsString := '%' + SearchValue + '%';
    MainModuleInstance.Qusertable.Open;

    // Refresh the grid to display the search results
    userGrid.Refresh;
  except
    on E: Exception do
      ShowMessage('Error: ' + E.Message);
  end;
end;


//SUBMIT BUTTON
procedure TMainForm.submitbtnClick(Sender: TObject);
var
  userId, RegNo, ReceiptNo, Bay, make, model, colour, Contact, Address, firstname: string;
  RegDate: TDateTime;
  MainModuleInstance: Tuni;
begin
  // Retrieve data from the form fields
  userId := UniEditUser_id.Text;
  RegNo := UniEditRegno.Text;
  ReceiptNo := UniEditRecno.Text;
  make := UniEditVehmake.Text;
  model := UniEditVehModel.Text;
  colour := UniEditVehcolour.Text;
  Bay := UniEditBayno.Text;
  Contact := UniEditContactno.Text;
  Address := UniEditAddress.Text;
  firstname := UniEditFirstname.Text;
  RegDate := datepicker.DateTime;

  // Check if any required field is empty
  if (userId = '') or (RegNo = '') or (ReceiptNo = '') or (make = '') or (model = '') or (colour = '') or (firstname = '') or (Bay = '') or
     (Contact = '') or (Address = '') or (RegDate = 0) then
  begin
    ShowMessage('Please fill in all fields');
    Exit;
  end;

  MainModuleInstance := Uni;

  try
    // Prepare SQL query to insert data into disk_reg table
    MainModuleInstance.qDiskapplication.SQL.Text :=
      'INSERT INTO diskapplication (user_no, reg_no, receipt_no, bay_no, vehmakes, vehmodel, vehcolour, contact_no, address, reg_date) ' +
      'VALUES (:user_no, :reg_no, :receipt_no, :bay_no, :vehmakes, :vehmodel, :vehcolour, :contact_no, :address, :reg_date)';

    MainModuleInstance.qDiskapplication.ParamByName('user_no').AsString := userId;
    MainModuleInstance.qDiskapplication.ParamByName('reg_no').AsString := RegNo;
    MainModuleInstance.qDiskapplication.ParamByName('receipt_no').AsString := ReceiptNo;
    MainModuleInstance.qDiskapplication.ParamByName('vehmakes').AsString := make;
    MainModuleInstance.qDiskapplication.ParamByName('vehmodel').AsString := model;
    MainModuleInstance.qDiskapplication.ParamByName('vehcolour').AsString := colour;
    MainModuleInstance.qDiskapplication.ParamByName('bay_no').AsString := Bay;
    MainModuleInstance.qDiskapplication.ParamByName('contact_no').AsString := Contact;
    MainModuleInstance.qDiskapplication.ParamByName('address').AsString := Address;
    MainModuleInstance.qDiskapplication.ParamByName('reg_date').AsDateTime := RegDate;
    MainModuleInstance.qDiskapplication.ExecSQL;

    // Show message for successful insert
    ShowMessage('Data inserted successfully');

    // Refresh the dataset to reflect changes in the grid
    MainModuleInstance.qDiskapplication.Close;
    MainModuleInstance.qDiskapplication.SQL.Text := 'SELECT * FROM diskapplication';
    MainModuleInstance.qDiskapplication.Open;

    // Refresh the grid to display updated data
    diskGrid.Refresh;
  except
    on E: Exception do
      ShowMessage('Error: ' + E.Message);
  end;
end;




//TREEVIEW


procedure TMainForm.UniTreeView1Change(Sender: TObject; Node: TUniTreeNode);

var
  MainModuleInstance: Tuni;

    begin
        MainModuleInstance := uni;
//      // Check which item in the tree view is selected
      if Node.Text = 'Disk Registration' then
      begin
        try
          // Prepare SQL query to fetch data from disk_reg table
          diskGrid.Visible := True;
          diskNaviBar.Visible := True;
          userNaviBar.Visible := False;
          userGrid.Visible := False;
          MainModuleInstance.qdiskapplication.SQL.Text := 'SELECT * FROM diskapplication';
          MainModuleInstance.qdiskapplication.Open;
          // Refresh the grid to display the fetched data
          diskGrid.Refresh;
        except
          on E: Exception do
            ShowMessage('Error: ' + E.Message);
        end;
      end
      else if  Node.Text = 'Users' then
        begin
            try
            //diskGrid.Visible := False;
            userGrid.Visible := True;
            diskNaviBar.Visible := False;
            userNaviBar.Visible := True;
            // Prepare SQL query to fetch data from disk_reg table
            MainModuleInstance.Qusertable.SQL.Text := 'SELECT * FROM usertable';
            MainModuleInstance.Qusertable.Open;
            // Refresh the grid to display the fetched data
            userGrid.Refresh;
          except
            on E: Exception do
              ShowMessage('Error: ' + E.Message);
          end;
        end

    end;

procedure TMainForm.userGridCellClick(Column: TUniDBGridColumn);

 var
  MainModuleInstance: TUni;
begin
  MainModuleInstance := Uni;
  if UserGrid.DataSource.DataSet.RecordCount > 0 then
  begin
    UniEditUser_Id.Text := UserGrid.DataSource.DataSet.FieldByName('user_no').AsString;
    UniEditFirstname.Text := UserGrid.DataSource.DataSet.FieldByName('first_name').AsString;
    UniEditSurname.Text := UserGrid.DataSource.DataSet.FieldByName('surname').AsString;
  end;
end;

//procedure TmainForm.DiskGridCellClick(Column: TUniDBGridColumn);
//
//var
//  MainModuleInstance: TUni;
//  begin
//    MainModuleInstance := Uni;
//
// if DiskGrid.DataSource.DataSet.RecordCount > 0 then
//  begin
//    UniDBEdit13.Text := DiskGrid.DataSource.DataSet.FieldByName('reg_no').AsString;
//    cmbVehMakes.Text := DiskGrid.DataSource.DataSet.FieldByName('vehmake').AsString;
//    cmbVehModel.Text := DiskGrid.DataSource.DataSet.FieldByName('vehmodel').AsString;
//    cmbVehColour.Text:= DiskGrid.DataSource.DataSet.FieldByName('vehcolour').AsString;
//    UniDBEdit3.Text  := DiskGrid.DataSource.DataSet.FieldByName('receipt_no').AsString;
//    UniDBEdit4.Text  := DiskGrid.DataSource.DataSet.FieldByName('bay_no').AsString;
//    UniDBEdit5.Text  := DiskGrid.DataSource.DataSet.FieldByName('contact_no').AsString;
//    UniDBEdit6.Text  := DiskGrid.DataSource.DataSet.FieldByName('address').AsString;
//  end;
//  end;

//procedure TMainForm.userradClick(Sender: TObject);
//  begin
//    FSelectedTable := 'usertable';
//  end;
  //
  //
  //procedure TMainForm.vehiclemakeradClick(Sender: TObject);
  //begin
  //   FSelectedTable := 'vehmakes';
  //end;
  //procedure TMainForm.departmentradClick(Sender: TObject);
  //begin
  //  FSelectedTable := 'departments';
  //end;
  //procedure TMainForm.facultyradClick(Sender: TObject);
  //begin
  //  FSelectedTable := 'faculties';
  //end;
//   procedure TMainForm.diskregradClick(Sender: TObject);
//  begin
//    FSelectedTable := 'diskapplication';
//  end;

//procedure TMainForm.clearbtnClick(Sender: TObject);
//begin
//// Clear all input fields
//  usertypnoedit.Text := '';
//  regnoedit.Text := '';
//  usertypnoedit.Text :='';
//  receiptedit.Text := '';
//  bayedit.Text := '';
//  contactedit.Text := '';
//  addressedit.Text := '';
//  regdateedit.Text := '';
//end;
//
//procedure TMainForm.diskGridCellClick(Column: TUniDBGridColumn);
//    begin
//    // Check if a valid row is selected
//      if diskGrid.DataSource.DataSet.RecordCount > 0 then
//        begin
//         usertypnoedit.Text := diskGrid.DataSource.DataSet.FieldByName('user_no').AsString;
//         firstnameedit.Text := diskGrid.DataSource.DataSet.FieldByName('first_name').AsString;
//         surnameedit.Text := diskGrid.DataSource.DataSet.FieldByName('surname').AsString;
//         departmentbox.Text := diskGrid.DataSource.DataSet.FieldByName('department_name').AsString;
//         facultybox.Text := diskGrid.DataSource.DataSet.FieldByName('faculty_name').AsString;
//         campusbox.Text := diskGrid.DataSource.DataSet.FieldByName('campus_name').AsString;
//         contactedit.Text := diskGrid.DataSource.DataSet.FieldByName('contact').AsString;
//         addressedit.Text := diskGrid.DataSource.DataSet.FieldByName('address').AsString;
//    end
//      else
//      begin
//                   // Populate the fields in the right panel with the values of the selected record
//          userdedit.Text := diskGrid.DataSource.DataSet.FieldByName('diskseq').AsString;
//          regnoedit.Text := diskGrid.DataSource.DataSet.FieldByName('regno').AsString;
//         usertypnoedit.Text := diskGrid.DataSource.DataSet.FieldByName('user_no').AsString;
//         firstnameedit.Text := diskGrid.DataSource.DataSet.FieldByName('first_name').AsString;
//         surnameedit.Text := diskGrid.DataSource.DataSet.FieldByName('surname').AsString;
//         departmentbox.Text := diskGrid.DataSource.DataSet.FieldByName('department_name').AsString;
//         facultybox.Text := diskGrid.DataSource.DataSet.FieldByName('faculty_name').AsString;
//         campusbox.Text := diskGrid.DataSource.DataSet.FieldByName('campus_name').AsString;
//         contactedit.Text := diskGrid.DataSource.DataSet.FieldByName('contact').AsString;
//         addressedit.Text := diskGrid.DataSource.DataSet.FieldByName('address').AsString;
//          receiptedit.Text := diskGrid.DataSource.DataSet.FieldByName('receiptno').AsString;
//          bayedit.Text := diskGrid.DataSource.DataSet.FieldByName('bayno').AsString;
//          contactedit.Text := diskGrid.DataSource.DataSet.FieldByName('contactno').AsString;
//          addressedit.Text := diskGrid.DataSource.DataSet.FieldByName('address').AsString;
//          regdateedit.Text := diskGrid.DataSource.DataSet.FieldByName('regdate').AsString;
//      end;
//    end;

 // end;

initialization
  RegisterAppFormClass(TMainForm);
end.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  //Mxolisi Ndovela
